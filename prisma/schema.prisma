// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole? @default(USER)
  Order         Order[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
   id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  quantity    Int
  type        String
  supplierId  String  @db.ObjectId

  supplier  Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  Inventory Inventory[]
  OrderItem OrderItem[]

  @@map("products")
}



model Supplier {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId

  name     String
  email    String
  contact  String?
  products Product[]

  @@map("suppliers")
}

model Inventory {
   id    String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId 
  quantity  Int
  updatedAt DateTime @updatedAt
  productName String 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  orderDate   DateTime    @default(now())
  totalAmount Float
  items       OrderItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String @db.ObjectId
  productId String @db.ObjectId
  productname String 
  category   String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}
